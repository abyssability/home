snippet_support = false
verbosity = 2

[server]
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
timeout = 0

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rust-analyzer"
settings_section = "rust-analyzer"
[language.rust.settings.rust-analyzer]
hoverActions.enable = false # kak-lsp doesn't support this at the moment
# cargo.features = []
# See https://rust-analyzer.github.io/manual.html#configuration
# If you get 'unresolved proc macro' warnings, you have two options
# 1. The safe choice is two disable the warning:
#diagnostics.disabled = ["unresolved-proc-macro"]
# 2. Or you can opt-in for proc macro support
procMacro.enable = true
cargo.loadOutDirsFromCheck = true
# See https://github.com/rust-analyzer/rust-analyzer/issues/6448


# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/f6da603c7fe56c19a275dc7bab1f30fe1ad39707/crates/ide/src/syntax_highlighting.rs#L42


# Items

[[semantic_tokens]]
token = "enum"
face = "module"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "macro"
face = "meta"

[[semantic_tokens]]
token = "method"
face = "function"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "struct"
face = "type"

[[semantic_tokens]]
token = "trait"
face = "union"

[[semantic_tokens]]
token = "typeAlias"
face = "meta"

[[semantic_tokens]]
token = "union"
face = "union"


# Literals

[[semantic_tokens]]
token = "boolean"
face = "value"

[[semantic_tokens]]
token = "character"
face = "string"

[[semantic_tokens]]
token = "number"
face = "mono"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "escapeSequence"
face = "meta"

[[semantic_tokens]]
token = "formatSpecifier"
face = "mono"


# Operators

#[[semantic_tokens]]
#token = "arithmetic"
#face = "operator"

#[[semantic_tokens]]
#token = "bitwise"
#face = "operator"

#[[semantic_tokens]]
#token = "comparison"
#face = "operator"

#[[semantic_tokens]]
#token = "logical"
#face = "operator"

[[semantic_tokens]]
token = "operator"
face = "operator"


# Puncuation

#[[semantic_tokens]]
#token = "angle"
#face = "puncuation"

#[[semantic_tokens]]
#token = "brace"
#face = "puncuation"

#[[semantic_tokens]]
#token = "bracket"
#face = "puncuation"

#[[semantic_tokens]]
#token = "parenthesis"
#face = "puncuation"

#[[semantic_tokens]]
#token = "colon"
#face = "puncuation"

#[[semantic_tokens]]
#token = "comma"
#face = "puncuation"

#[[semantic_tokens]]
#token = "dot"
#face = "puncuation"

#[[semantic_tokens]]
#token = "Semi"
#face = "puncuation"

#[[semantic_tokens]]
#token = "puctuation"
#face = "puncuation"


# Other

[[semantic_tokens]]
token = "attribute"
face = "meta"

[[semantic_tokens]]
token = "builtinType"
face = "builtin"

[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "comment"
face = "comment"

#[[semantic_tokens]]
#token = "constParameter"
#face = ""

[[semantic_tokens]]
token = "enumMember"
face = "type"

#[[semantic_tokens]]
#token = "generic"
#face = ""

[[semantic_tokens]]
token = "keyword"
face = "unsafe"
modifiers = ["unsafe"]

[[semantic_tokens]]
token = "keyword"
face = "attribute"
modifiers = ["async"]

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "label"
face = "attribute"

[[semantic_tokens]]
token = "lifetime"
face = "attribute"

[[semantic_tokens]]
token = "parameter"
face = "variable"

[[semantic_tokens]]
token = "property"
face = "variable"

[[semantic_tokens]]
token = "selfKeyword"
face = "attribute"

#[[semantic_tokens]]
#token = "typeParameter"
#face = ""

#[[semantic_tokens]]
#token = "uresolvedReference"
#face = ""

[[semantic_tokens]]
token = "variable"
face = "static"
modifiers = ["static"]

[[semantic_tokens]]
token = "variable"
face = "variable"


# Modifiers
#
# async:: Emitted for async functions and the `async` and `await` keywords.
# attribute:: Emitted for tokens inside attributes.
# callable:: Emitted for locals whose types implements one of the `Fn*` traits.
# constant:: Emitted for consts.
# consuming:: Emitted for locals that are being consumed when use in a function call.
# controlFlow:: Emitted for control-flow related tokens, this includes the `?` operator.
# declaration:: Emitted for names of definitions, like `foo` in `fn foo() {}`.
# documentation:: Emitted for documentation comments.
# injected:: Emitted for doc-string injected highlighting like rust source blocks in documentation.
# intraDocLink:: Emitted for intra doc links in doc-strings.
# library:: Emitted for items that are defined outside of the current crate.
# mutable:: Emitted for mutable locals and statics.
# static:: Emitted for "static" functions, also known as functions that do not take a `self` param, as well as statics and consts.
# trait:: Emitted for associated trait items.
# unsafe:: Emitted for unsafe operations, like unsafe function calls, as well as the `unsafe` token.
